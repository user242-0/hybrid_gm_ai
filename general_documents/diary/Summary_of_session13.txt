以下は、**セッション13（GUIまわり）**のダイアリー用サマリーです。
テーマは「**色が文字表示のみ**／**ログが高速スタック**」問題の解消と、その副作用・注意点です。

---

## 1) 何を解決したか（結論）

* **GUIを“最新の手番＋補足(α)だけ”のコントローラに再設計。**
  旧実装は `log_q` に来た文字列/タプルを逐次追記しており、ログが**延々と積み上がる**（スクロールで過去が見えてしまう）状態でした。
  → 新実装では、GUIが**辞書メッセージのみ**を受け付け、
  `{"mode":"turn","reset":True}` を受信すると**画面を全置換**、`{"mode":"note",...}` は**手番の補足**として直下にだけ出す設計に変更。
  これにより**画面には常に“最新の手番＋補足”だけ**が存在します。

* **色は“文字ではなく本物の色”で表示。**
  表示メッセージの `tag` に `#RRGGBB` / `rgb:R,G,B` / 名前色（`red` など）を渡すと、GUIがその色で描画します。
  選択肢の色は `Choice.get_emotion_x_player_scaled_color()` を利用し、プレイヤーの心色×各コマンド軸で発色。
  軸定義は `choice_definitions` の `axis/value` を参照して生成しています。

---

## 2) 変更点（モジュール別）

### GUI（`gui.py`）

* **旧**：`pump_logs()` が `str` / `(msg, tag)` をそのまま Text に追記 → 過去が蓄積。
* **新**：**厳格モード**

  * `{"mode":"turn","reset":True}` … 新手番開始＝画面を空にして以後の手番行を表示
  * `{"mode":"turn","text":..., "tag":...}` … 手番本文
  * `{"mode":"note","text":..., "tag":...}` … **補足(α)**（手番直下だけ）
  * それ以外（`str` / `tuple`）は**描画しない**＝高速スタックを遮断

### 手番描画（`present_choices(...)`）

* **毎回** `{"mode":"turn","reset":True}` を先頭に送る → **最新の手番だけ**が残る。
* 選択肢行を `{"mode":"turn",...}` で送信し、最後に `game_state["last_action_note"]` があれば `{"mode":"note", ...}` を**毎回**出力（再描画ループでも残る仕様）。
  ※ `present_choices` が0.05秒ループで呼ばれる構造に合わせた対応。

### 実行ログの扱い（`simulation_utils.execute_player_choice`）

* **旧**：アクション実行時に `log_q.put(f"[PLY] ...")` を直接送っていた。→ 新GUIでは表示対象外。
* **新**：実行ログは**画面に直接送らない**。代わりに
  `game_state["last_action_note"] = {"text": "...", "tag": "green"}` へ**一時保存**し、
  次の `present_choices()` が **αとして描画**する運用に変更。

### 感情入力ガイダンス（`emotion_manager.py`）

* **旧**：`log_q.put(( "❓ 感情値入力: ...", "YELLOW"))` の**タプル**で送信。→ 新GUIでは無視される。
* **新**：`{"mode":"note", "text":"...", "tag":"yellow"}` として送ると、**補足(α)**に表示される（必要に応じて `note_clear` も可）。

### ループ構造の把握（`simulation.py`）

* 入力待ちで `event_q.get(timeout=0.05)` を使うため、**タイムアウトごとに `present_choices()` を再描画**。
  そのため、**note は `present_choices()` 内で毎回送る**方式にしないと即座に消える（外側で1回だけ送る実装はNG）。

---

## 3) 使い方メモ（メッセージ仕様）

* **手番のはじまり**

  ```py
  log_q.put({"mode":"turn","reset":True})
  ```
* **手番本文（色つき）**

  ```py
  log_q.put({"mode":"turn","text":"=== Hero の手番 ===","tag":"header"})
  log_q.put({"mode":"turn","text":"1. 攻撃する","tag":"rgb:200,40,40"})
  ```
* **補足(α)**

  ```py
  log_q.put({"mode":"note","text":"[PLY] Hero ▶ switch_character Luna","tag":"green"})
  ```
* **重要**：`str` / `(msg, tag)` は**表示されない**（厳格化のため）。
  既存コードで使っているなら、**上記の辞書形式に置き換え**る。

---

## 4) 注記・落とし穴

1. **“辞書＋modeだけ描画”**になったため、
   旧来の `record(f"[AI] ...")` のような**生文字ログはGUIに出ません**（意図的にノイズ遮断）。
   デバッグや履歴は永続ロガー `log_action(...)` / CLI に寄せる方針で。

2. **note の寿命**は「次の `reset` まで」。
   長く残したい／一度だけ出したい等は、`game_state` 側に `last_action_note_once` 等のフラグを設け、`present_choices()` で**表示後に消す**運用が簡単。

3. **選択肢の可用性**は `RequirementsChecker` と `actions[...]["requirements"]` / `available_to` で制御される。
   GUIには「表示対象の行」しか出さないため、**条件式の破綻は即“選べない”に直結**する点に注意。

4. **色の一貫性**
   選択肢の色は `Choice` の軸×強度×プレイヤー心色で決まり、明度底上げも含む。
   新しい軸や段階を足す場合は `choice_definitions` を更新する。

5. **既存のタプル送信の掃除**
   `emotion_manager.py` などで残っている `(msg,"YELLOW")` のような**タプル送信は要置換**。
   GUIは描かないため、気づかない“無言失敗”が起きやすい。

---

## 5) Before / After の要点（抜粋）

* **Before**

  * GUIが `str` / `(msg, tag)` を**逐次追記**→ログが**高速スタック**。
  * アクション実行ログを**画面へ直送**していた。

* **After**

  * **最新の手番＋補足のみ**を描画（**辞書＋mode**のみ受理）。
  * 実行ログは `game_state["last_action_note"]` 経由で**次の手番にα表示**へ変更。
  * 入力待ちの**高頻度再描画ループ**でも note が消えないよう、`present_choices()` が**毎回** note を描く方針に統一。

---

必要なら、この仕様を `README_UI.md` 的な文書に抜き出しておきます。
次回は「選択中の行ハイライト」「背景帯色」「アクセシビリティ配色（色弱対応）」あたりを追加候補にどうぞ。
